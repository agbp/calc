/******/ (() => { // webpackBootstrap
var __webpack_exports__ = {};
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
var operationId;
(function (operationId) {
    operationId[operationId["plus"] = 10] = "plus";
    operationId[operationId["minus"] = 20] = "minus";
    operationId[operationId["multiply"] = 30] = "multiply";
    operationId[operationId["divide"] = 40] = "divide";
    operationId[operationId["percent"] = 50] = "percent";
    operationId[operationId["equal"] = 60] = "equal";
    operationId[operationId["pow"] = 70] = "pow";
    operationId[operationId["sqrt"] = 80] = "sqrt";
    operationId[operationId["sin"] = 90] = "sin";
    operationId[operationId["cos"] = 100] = "cos";
    operationId[operationId["asin"] = 110] = "asin";
    operationId[operationId["acos"] = 120] = "acos";
    operationId[operationId["log"] = 130] = "log";
    operationId[operationId["oneDivX"] = 140] = "oneDivX";
})(operationId || (operationId = {}));
;
// возвращает куки с указанным name,
// или undefined, если ничего не найдено
function getCookie(name) {
    var matches = document.cookie.match(new RegExp("(?:^|; )" + name.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, '\\$1') + "=([^;]*)"));
    return matches ? decodeURIComponent(matches[1]) : undefined;
}
var calculator = {
    inputElement: document.getElementById('calc_input'),
    historyDiv: document.getElementById('calc_history'),
    scientificDiv: document.getElementById('calc_scientific'),
    historyList: document.getElementById('calc_history_list'),
    historyListData: [],
    stack: [],
    waiting4NewNumber: false,
    historyOpened: false,
    scientificOpened: false,
    operations: [],
    clearInput: function () {
        this.inputElement.value = '0';
        this.stack.length = 0;
    },
    getHistoryList: function () {
        var _this = this;
        var historyFromCookie = getCookie('historyList');
        if (historyFromCookie) {
            this.historyListData = JSON.parse(historyFromCookie);
            this.historyListData.forEach(function (el) {
                _this.addToHistoryList.call(_this, el, true);
            });
        }
    },
    saveHistoryList: function () {
        console.log(JSON.stringify(this.historyListData));
        document.cookie = "historyList=".concat(JSON.stringify(this.historyListData));
    },
    addToHistoryList: function (arg, initialization) {
        if (initialization === void 0) { initialization = false; }
        var newLi = document.createElement("li");
        newLi.innerText = arg;
        this.historyList.appendChild(newLi);
        if (initialization)
            return;
        this.historyListData.push(arg);
        this.saveHistoryList();
    },
    addDigitOrOperation: function (input) {
        if (input in operationId) { // is operation button pressed ?
            var currOperation = this.operations.find(function (el) { return el.id === input; });
            var result = NaN;
            if (this.stack.length) { //there is data to be calculated
                var opId_1 = this.stack.pop();
                var operation = this.operations.find(function (el) { return el.id === opId_1; });
                var operands = [];
                for (var i = 1; i < operation.arity; i++) {
                    operands.push(this.stack.pop());
                }
                operands.push(Number(this.inputElement.value));
                result = operation.action.apply(null, operands);
                this.inputElement.value = String(result);
                this.addToHistoryList(String(operands[0]) +
                    operation.representation +
                    String(operands[1]) +
                    '=' + this.inputElement.value);
            }
            else {
                result = Number(this.inputElement.value);
            }
            if (currOperation.arity === 1) { // no need to push in stack, just calculate right now
                result = currOperation.action(Number(this.inputElement.value));
                this.addToHistoryList(currOperation.representation +
                    '(' + this.inputElement.value + ')' +
                    '=' + String(result));
                this.inputElement.value = String(result);
            }
            else if (currOperation.arity > 1) {
                this.stack.push(result);
                this.stack.push(input);
            }
            this.waiting4NewNumber = true;
        }
        else { // not operation button preesed
            if (this.waiting4NewNumber && input !== '\b') { // start of input a new number
                this.inputElement.value = '';
                this.waiting4NewNumber = false;
            }
            if (input === '\b') { // backspace button pressed
                this.inputElement.value = this.inputElement.value.slice(0, -1);
                if (this.inputElement.value === '')
                    this.inputElement.value = '0';
                this.waiting4NewNumber = false;
                return;
            }
            if (input === '.') { // decimal point button pressed
                if (this.inputElement.value.indexOf('.') !== -1)
                    return;
                if (Number(this.inputElement.value) === 0)
                    this.inputElement.value = '0';
            }
            else {
                if (input === '0')
                    if (this.inputElement.value === '0')
                        return; // ignore input of 0 if current string value is 0 
                if (this.inputElement.value.indexOf('.') === -1 && Number(this.inputElement.value) === 0)
                    this.inputElement.value = ''; // there is no decimal point and last input is equal to 0, replace last input with new
            }
            this.inputElement.value = this.inputElement.value + input; // add next digit to current number input 
        }
    },
    changeHistoryDisplay: function () {
        this.historyOpened = !this.historyOpened;
        this.historyDiv.classList.toggle('hidden');
        this.historyDiv.classList.toggle('shown');
        document.cookie = "historyOpened=".concat(this.historyOpened);
    },
    changeScientificDisplay: function () {
        this.scientificOpened = !this.scientificOpened;
        this.scientificDiv.classList.toggle('hidden');
        this.scientificDiv.classList.toggle('shown');
        document.cookie = "scientificOpened=".concat(this.scientificOpened);
    },
    init: function () {
        var _this = this;
        var historyBtn = document.getElementById('btn_history');
        historyBtn.addEventListener('click', this.changeHistoryDisplay.bind(this));
        var scientificBtn = document.getElementById('btn_scientific');
        scientificBtn.addEventListener('click', this.changeScientificDisplay.bind(this));
        this.initOperations();
        this.clearInput();
        this.inputElement.addEventListener('input', function (event) {
            var target = event.target;
            console.log('value = ', target.value);
            if (target.value === '') {
                _this.clearInput();
                return;
            }
        });
        this.addActionToButtonClick('btn_clear', this.clearInput.bind(this));
        this.addEventsToDigitButtons();
        this.addInputToButtonClick('btn_pt', '.');
        this.addInputToButtonClick('btn_backspace', '\b');
        var historyOpenedFromCookie = getCookie('historyOpened');
        if (historyOpenedFromCookie !== undefined)
            if (String(this.historyOpened) !== historyOpenedFromCookie)
                this.changeHistoryDisplay();
        var scientificOpenedFromCookie = getCookie('scientificOpened');
        if (scientificOpenedFromCookie !== undefined)
            if (String(this.scientificOpened) !== scientificOpenedFromCookie)
                this.changeScientificDisplay();
        this.getHistoryList();
    },
    addActionToButtonClick: function (buttonId, action) {
        var btn = document.getElementById(buttonId);
        btn.addEventListener('click', action);
    },
    addInputToButtonClick: function (buttonId, input) {
        var _this = this;
        this.addActionToButtonClick(buttonId, function () {
            _this.addDigitOrOperation(input);
        });
    },
    addEventsToDigitButtons: function () {
        for (var i = 0; i < 10; i++) {
            this.addInputToButtonClick("btn_".concat(i), String(i));
        }
    },
    initOperations: function () {
        var _this = this;
        this.operations.push({
            id: operationId.equal,
            bittonId: 'btn_equal',
            arity: 0,
            action: function (a, b) { return NaN; },
            representation: '=',
        });
        this.operations.push({
            id: operationId.plus,
            bittonId: 'btn_plus',
            arity: 2, action: function (a, b) { return a + b; },
            representation: '+',
        });
        this.operations.push({
            id: operationId.minus,
            bittonId: 'btn_minus',
            arity: 2,
            action: function (a, b) { return a - b; },
            representation: '-',
        });
        this.operations.push({
            id: operationId.multiply,
            bittonId: 'btn_multiply',
            arity: 2, action: function (a, b) { return a * b; },
            representation: '×',
        });
        this.operations.push({
            id: operationId.divide,
            bittonId: 'btn_divide',
            arity: 2, action: function (a, b) { return a / b; },
            representation: '/',
        });
        this.operations.push({
            id: operationId.pow,
            bittonId: 'btn_pow',
            arity: 2, action: function (a, b) { return Math.pow(a, b); },
            representation: '^',
        });
        this.operations.push({
            id: operationId.sqrt,
            bittonId: 'btn_sqrt',
            arity: 1, action: function (a) { return Math.sqrt(a); },
            representation: '√',
        });
        this.operations.push({
            id: operationId.percent,
            bittonId: 'btn_percent',
            arity: 1, action: function (a) { return (a / 100); },
            representation: '%',
        });
        this.operations.push({
            id: operationId.sin,
            bittonId: 'btn_sin',
            arity: 1, action: function (a) { return Math.sin(a); },
            representation: 'sin',
        });
        this.operations.push({
            id: operationId.cos,
            bittonId: 'btn_cos',
            arity: 1, action: function (a) { return Math.cos(a); },
            representation: 'cos',
        });
        this.operations.push({
            id: operationId.asin,
            bittonId: 'btn_asin',
            arity: 1, action: function (a) { return Math.asin(a); },
            representation: 'asin',
        });
        this.operations.push({
            id: operationId.acos,
            bittonId: 'btn_acos',
            arity: 1, action: function (a) { return Math.acos(a); },
            representation: 'acos',
        });
        this.operations.push({
            id: operationId.log,
            bittonId: 'btn_log',
            arity: 1, action: function (a) { return Math.log(a); },
            representation: 'log',
        });
        this.operations.push({
            id: operationId.oneDivX,
            bittonId: 'btn_oneDivX',
            arity: 1, action: function (a) { return (1 / a); },
            representation: '1/',
        });
        this.operations.forEach(function (el) {
            _this.addInputToButtonClick(el.bittonId, el.id);
        });
    }
};
calculator.init();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,